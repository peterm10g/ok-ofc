<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.lsh.ofc.core.dao.OfcOperateLogDAO">

    <resultMap id="resultMap" type="OfcOperateLog">
        <id     property="id"          column="id"           jdbcType="BIGINT"  javaType="java.lang.Long" />
        <result property="billCode"    column="bill_code"    jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="billType"    column="bill_type"    jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="operateType" column="operate_type" jdbcType="INTEGER" javaType="java.lang.Integer" />
        <result property="operateDesc" column="operate_desc" jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="remark"      column="remark"       jdbcType="VARCHAR" javaType="java.lang.String" />
        <result property="createTime"  column="create_time"  jdbcType="INTEGER" javaType="java.lang.Integer" />
    </resultMap>

    <sql id="columns">
        id,
        bill_code,
        bill_type,
        operate_type,
        operate_desc,
        remark,
        create_time
    </sql>

    <sql id="conditions">
        <if test="id != null">
            and id = #{id, jdbcType=BIGINT}
        </if>
        <if test="billCode != null">
            and bill_code = #{billCode, jdbcType=VARCHAR}
        </if>
        <if test="billType != null">
            and bill_type = #{billType, jdbcType=VARCHAR}
        </if>
        <if test="operateType != null">
            and operate_type = #{operateType, jdbcType=INTEGER}
        </if>
        <if test="operateDesc != null">
            and operate_desc = #{operateDesc, jdbcType=VARCHAR}
        </if>
        <if test="remark != null">
            and remark = #{remark, jdbcType=VARCHAR}
        </if>
        <if test="createTime != null">
            and create_time = #{createTime, jdbcType=INTEGER}
        </if>
    </sql>

    <sql id="select">
        select
        <include refid="columns" />
        from
        ofc_operate_log
        <where>
            <include refid="conditions" />
        </where>
    </sql>

    <insert id="insert" parameterType="OfcOperateLog">
        insert into ofc_operate_log
        <trim prefix="(" suffixOverrides="," suffix=")">
            id,
            <if test="billCode != null">
                bill_code,
            </if>
            <if test="billType != null">
                bill_type,
            </if>
            <if test="operateType != null">
                operate_type,
            </if>
            <if test="operateDesc != null">
                operate_desc,
            </if>
            <if test="remark != null">
                remark,
            </if>
            create_time,
        </trim>
        values
        <trim prefix="(" suffixOverrides="," suffix=")">
            #{id, jdbcType=BIGINT},
            <if test="billCode != null">
                #{billCode, jdbcType=VARCHAR},
            </if>
            <if test="billType != null">
                #{billType, jdbcType=VARCHAR},
            </if>
            <if test="operateType != null">
                #{operateType, jdbcType=INTEGER},
            </if>
            <if test="operateDesc != null">
                #{operateDesc, jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark, jdbcType=VARCHAR},
            </if>
            <choose>
                <when test="createTime != null">
                    #{createTime, jdbcType=INTEGER},
                </when>
                <otherwise>
                    UNIX_TIMESTAMP(),
                </otherwise>
            </choose>
        </trim>
    </insert>

    <update id="update" parameterType="OfcOperateLog">
        update ofc_operate_log
        <set>
            <if test="billCode != null">
                bill_code = #{billCode, jdbcType=VARCHAR},
            </if>
            <if test="billType != null">
                bill_type = #{billType, jdbcType=VARCHAR},
            </if>
            <if test="operateType != null">
                operate_type = #{operateType, jdbcType=INTEGER},
            </if>
            <if test="operateDesc != null">
                operate_desc = #{operateDesc, jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark, jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id, jdbcType=BIGINT}
    </update>

    <update id="updateByFilter" parameterType="java.util.Map">
        update ofc_operate_log
        <set>
            <if test="update.billCode != null">
                bill_code = #{update.billCode, jdbcType=VARCHAR},
            </if>
            <if test="update.billType != null">
                bill_type = #{update.billType, jdbcType=VARCHAR},
            </if>
            <if test="update.operateType != null">
                operate_type = #{update.operateType, jdbcType=INTEGER},
            </if>
            <if test="update.operateDesc != null">
                operate_desc = #{update.operateDesc, jdbcType=VARCHAR},
            </if>
            <if test="update.remark != null">
                remark = #{update.remark, jdbcType=VARCHAR},
            </if>
            <if test="update.createTime != null">
                create_time = #{update.createTime, jdbcType=INTEGER},
            </if>
        </set>
        <where>
            <if test="expect.id != null">
                and id = #{expect.id, jdbcType=BIGINT}
            </if>
            <if test="expect.billCode != null">
                and bill_code = #{expect.billCode, jdbcType=VARCHAR}
            </if>
            <if test="expect.billType != null">
                and bill_type = #{expect.billType, jdbcType=VARCHAR}
            </if>
            <if test="expect.operateType != null">
                and operate_type = #{expect.operateType, jdbcType=INTEGER}
            </if>
            <if test="expect.operateDesc != null">
                and operate_desc = #{expect.operateDesc, jdbcType=VARCHAR}
            </if>
            <if test="expect.remark != null">
                and remark = #{expect.remark, jdbcType=VARCHAR}
            </if>
            <if test="expect.createTime != null">
                and create_time = #{expect.createTime, jdbcType=INTEGER}
            </if>
        </where>
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        delete from ofc_operate_log where id = #{id, jdbcType=BIGINT}
    </delete>

    <delete id="deleteByFilter" parameterType="OfcOperateLog">
        delete from ofc_operate_log
        <where>
            <include refid="conditions" />
        </where>
    </delete>

    <select id="get" parameterType="java.lang.Long" resultMap="resultMap">
        select
          <include refid="columns" />
        from
          ofc_operate_log
        where
          id = #{id, jdbcType=BIGINT}
    </select>

    <select id="findOne" parameterType="OfcOperateLog" resultMap="resultMap">
        <include refid="select" />
    </select>

    <select id="findList" parameterType="OfcOperateLog" resultMap="resultMap">
        <include refid="select" />
    </select>

    <select id="count" parameterType="OfcOperateLog" resultType="java.lang.Integer">
        select
          count(*)
        from
          ofc_operate_log
        <where>
            <include refid="conditions" />
        </where>
    </select>

    <select id="fetchLogs" parameterType="map" resultMap="resultMap">
        select
          <include refid="columns" />
        from
          ofc_operate_log
        where
        id <![CDATA[>]]> #{offsetId, jdbcType=BIGINT}
        and bill_type = #{billType, jdbcType=VARCHAR}
        order by id
        limit #{fetchSize, jdbcType=INTEGER}
    </select>
</mapper>
